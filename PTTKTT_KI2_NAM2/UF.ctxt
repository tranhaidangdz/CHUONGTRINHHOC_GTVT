#BlueJ class context
comment0.target=UF
comment0.text=\r\n\ \ The\ {@code\ UF}\ class\ represents\ a\ <em>union\u2013find\ data\ type</em>\r\n\ \ (also\ known\ as\ the\ <em>disjoint-sets\ data\ type</em>).\r\n\ \ It\ supports\ the\ <em>union</em>\ and\ <em>find</em>\ operations,\r\n\ \ along\ with\ a\ <em>connected</em>\ operation\ for\ determining\ whether\r\n\ \ two\ sites\ are\ in\ the\ same\ component\ and\ a\ <em>count</em>\ operation\ that\r\n\ \ returns\ the\ total\ number\ of\ components.\r\n\ \ <p>\r\n\ \ The\ union\u2013find\ data\ type\ models\ connectivity\ among\ a\ set\ of\ <em>n</em>\r\n\ \ sites,\ named\ 0\ through\ <em>n</em>\u20131.\r\n\ \ The\ <em>is-connected-to</em>\ relation\ must\ be\ an\ \r\n\ \ <em>equivalence\ relation</em>\:\r\n\ \ <ul>\r\n\ \ <li>\ <em>Reflexive</em>\:\ <em>p</em>\ is\ connected\ to\ <em>p</em>.\r\n\ \ <li>\ <em>Symmetric</em>\:\ If\ <em>p</em>\ is\ connected\ to\ <em>q</em>,\r\n\ \ \ \ \ \ \ then\ <em>q</em>\ is\ connected\ to\ <em>p</em>.\r\n\ \ <li>\ <em>Transitive</em>\:\ If\ <em>p</em>\ is\ connected\ to\ <em>q</em>\r\n\ \ \ \ \ \ \ and\ <em>q</em>\ is\ connected\ to\ <em>r</em>,\ then\r\n\ \ \ \ \ \ \ <em>p</em>\ is\ connected\ to\ <em>r</em>.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ An\ equivalence\ relation\ partitions\ the\ sites\ into\r\n\ \ <em>equivalence\ classes</em>\ (or\ <em>components</em>).\ In\ this\ case,\r\n\ \ two\ sites\ are\ in\ the\ same\ component\ if\ and\ only\ if\ they\ are\ connected.\r\n\ \ Both\ sites\ and\ components\ are\ identified\ with\ integers\ between\ 0\ and\r\n\ \ <em>n</em>\u20131.\ \r\n\ \ Initially,\ there\ are\ <em>n</em>\ components,\ with\ each\ site\ in\ its\r\n\ \ own\ component.\ \ The\ <em>component\ identifier</em>\ of\ a\ component\r\n\ \ (also\ known\ as\ the\ <em>root</em>,\ <em>canonical\ element</em>,\ <em>leader</em>,\r\n\ \ or\ <em>set\ representative</em>)\ is\ one\ of\ the\ sites\ in\ the\ component\:\r\n\ \ two\ sites\ have\ the\ same\ component\ identifier\ if\ and\ only\ if\ they\ are\r\n\ \ in\ the\ same\ component.\r\n\ \ <ul>\r\n\ \ <li><em>union</em>(<em>p</em>,\ <em>q</em>)\ adds\ a\r\n\ \ \ \ \ \ connection\ between\ the\ two\ sites\ <em>p</em>\ and\ <em>q</em>.\r\n\ \ \ \ \ \ If\ <em>p</em>\ and\ <em>q</em>\ are\ in\ different\ components,\r\n\ \ \ \ \ \ then\ it\ replaces\r\n\ \ \ \ \ \ these\ two\ components\ with\ a\ new\ component\ that\ is\ the\ union\ of\r\n\ \ \ \ \ \ the\ two.\r\n\ \ <li><em>find</em>(<em>p</em>)\ returns\ the\ component\r\n\ \ \ \ \ \ identifier\ of\ the\ component\ containing\ <em>p</em>.\r\n\ \ <li><em>connected</em>(<em>p</em>,\ <em>q</em>)\r\n\ \ \ \ \ \ returns\ true\ if\ both\ <em>p</em>\ and\ <em>q</em>\r\n\ \ \ \ \ \ are\ in\ the\ same\ component,\ and\ false\ otherwise.\r\n\ \ <li><em>count</em>()\ returns\ the\ number\ of\ components.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ component\ identifier\ of\ a\ component\ can\ change\r\n\ \ only\ when\ the\ component\ itself\ changes\ during\ a\ call\ to\r\n\ \ <em>union</em>\u2014it\ cannot\ change\ during\ a\ call\r\n\ \ to\ <em>find</em>,\ <em>connected</em>,\ or\ <em>count</em>.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ weighted\ quick\ union\ by\ rank\ with\ path\ compression\r\n\ \ by\ halving.\r\n\ \ Initializing\ a\ data\ structure\ with\ <em>n</em>\ sites\ takes\ linear\ time.\r\n\ \ Afterwards,\ the\ <em>union</em>,\ <em>find</em>,\ and\ <em>connected</em>\ \r\n\ \ operations\ take\ logarithmic\ time\ (in\ the\ worst\ case)\ and\ the\r\n\ \ <em>count</em>\ operation\ takes\ constant\ time.\r\n\ \ Moreover,\ the\ amortized\ time\ per\ <em>union</em>,\ <em>find</em>,\r\n\ \ and\ <em>connected</em>\ operation\ has\ inverse\ Ackermann\ complexity.\r\n\ \ For\ alternate\ implementations\ of\ the\ same\ API,\ see\r\n\ \ {@link\ QuickUnionUF},\ {@link\ QuickFindUF},\ and\ {@link\ WeightedQuickUnionUF}.\r\n\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/15uf">Section\ 1.5</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=n
comment1.target=UF(int)
comment1.text=\r\n\ Initializes\ an\ empty\ union\u2013find\ data\ structure\ with\ {@code\ n}\ sites\r\n\ {@code\ 0}\ through\ {@code\ n-1}.\ Each\ site\ is\ initially\ in\ its\ own\ \r\n\ component.\r\n\r\n\ @param\ \ n\ the\ number\ of\ sites\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n\ <\ 0}\r\n
comment2.params=p
comment2.target=int\ find(int)
comment2.text=\r\n\ Returns\ the\ component\ identifier\ for\ the\ component\ containing\ site\ {@code\ p}.\r\n\r\n\ @param\ \ p\ the\ integer\ representing\ one\ site\r\n\ @return\ the\ component\ identifier\ for\ the\ component\ containing\ site\ {@code\ p}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ p\ <\ n}\r\n
comment3.params=
comment3.target=int\ count()
comment3.text=\r\n\ Returns\ the\ number\ of\ components.\r\n\r\n\ @return\ the\ number\ of\ components\ (between\ {@code\ 1}\ and\ {@code\ n})\r\n
comment4.params=p\ q
comment4.target=boolean\ connected(int,\ int)
comment4.text=\r\n\ Returns\ true\ if\ the\ the\ two\ sites\ are\ in\ the\ same\ component.\r\n\r\n\ @param\ \ p\ the\ integer\ representing\ one\ site\r\n\ @param\ \ q\ the\ integer\ representing\ the\ other\ site\r\n\ @return\ {@code\ true}\ if\ the\ two\ sites\ {@code\ p}\ and\ {@code\ q}\ are\ in\ the\ same\ component;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\r\n\ \ \ \ \ \ \ \ \ both\ {@code\ 0\ <\=\ p\ <\ n}\ and\ {@code\ 0\ <\=\ q\ <\ n}\r\n
comment5.params=p\ q
comment5.target=void\ union(int,\ int)
comment5.text=\r\n\ Merges\ the\ component\ containing\ site\ {@code\ p}\ with\ the\ \r\n\ the\ component\ containing\ site\ {@code\ q}.\r\n\r\n\ @param\ \ p\ the\ integer\ representing\ one\ site\r\n\ @param\ \ q\ the\ integer\ representing\ the\ other\ site\r\n\ @throws\ IllegalArgumentException\ unless\r\n\ \ \ \ \ \ \ \ \ both\ {@code\ 0\ <\=\ p\ <\ n}\ and\ {@code\ 0\ <\=\ q\ <\ n}\r\n
comment6.params=p
comment6.target=void\ validate(int)
comment7.params=args
comment7.target=void\ main(java.lang.String[])
comment7.text=\r\n\ Reads\ in\ a\ an\ integer\ {@code\ n}\ and\ a\ sequence\ of\ pairs\ of\ integers\r\n\ (between\ {@code\ 0}\ and\ {@code\ n-1})\ from\ standard\ input,\ where\ each\ integer\r\n\ in\ the\ pair\ represents\ some\ site;\r\n\ if\ the\ sites\ are\ in\ different\ components,\ merge\ the\ two\ components\r\n\ and\ print\ the\ pair\ to\ standard\ output.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=8
