#BlueJ class context
comment0.target=FordFulkerson
comment0.text=\r\n\ \ The\ {@code\ FordFulkerson}\ class\ represents\ a\ data\ type\ for\ computing\ a\r\n\ \ <em>maximum\ st-flow</em>\ and\ <em>minimum\ st-cut</em>\ in\ a\ flow\r\n\ \ network.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ the\ <em>Ford-Fulkerson</em>\ algorithm\ with\r\n\ \ the\ <em>shortest\ augmenting\ path</em>\ heuristic.\r\n\ \ The\ constructor\ takes\ time\ proportional\ to\ <em>E\ V</em>\ (<em>E</em>\ +\ <em>V</em>)\r\n\ \ in\ the\ worst\ case\ and\ extra\ space\ (not\ including\ the\ network)\r\n\ \ proportional\ to\ <em>V</em>,\ where\ <em>V</em>\ is\ the\ number\ of\ vertices\r\n\ \ and\ <em>E</em>\ is\ the\ number\ of\ edges.\ In\ practice,\ the\ algorithm\ will\r\n\ \ run\ much\ faster.\r\n\ \ Afterwards,\ the\ {@code\ inCut()}\ and\ {@code\ value()}\ methods\ take\r\n\ \ constant\ time.\r\n\ \ <p>\r\n\ \ If\ the\ capacities\ and\ initial\ flow\ values\ are\ all\ integers,\ then\ this\r\n\ \ implementation\ guarantees\ to\ compute\ an\ integer-valued\ maximum\ flow.\r\n\ \ If\ the\ capacities\ and\ floating-point\ numbers,\ then\ floating-point\r\n\ \ roundoff\ error\ can\ accumulate.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/64maxflow">Section\ 6.4</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=G\ s\ t
comment1.target=FordFulkerson(FlowNetwork,\ int,\ int)
comment1.text=\r\n\ Compute\ a\ maximum\ flow\ and\ minimum\ cut\ in\ the\ network\ {@code\ G}\r\n\ from\ vertex\ {@code\ s}\ to\ vertex\ {@code\ t}.\r\n\r\n\ @param\ \ G\ the\ flow\ network\r\n\ @param\ \ s\ the\ source\ vertex\r\n\ @param\ \ t\ the\ sink\ vertex\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ t\ <\ V}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ s\ \=\=\ t}\r\n\ @throws\ IllegalArgumentException\ if\ initial\ flow\ is\ infeasible\r\n
comment2.params=
comment2.target=double\ value()
comment2.text=\r\n\ Returns\ the\ value\ of\ the\ maximum\ flow.\r\n\r\n\ @return\ the\ value\ of\ the\ maximum\ flow\r\n
comment3.params=v
comment3.target=boolean\ inCut(int)
comment3.text=\r\n\ Returns\ true\ if\ the\ specified\ vertex\ is\ on\ the\ {@code\ s}\ side\ of\ the\ mincut.\r\n\r\n\ @param\ \ v\ vertex\r\n\ @return\ {@code\ true}\ if\ vertex\ {@code\ v}\ is\ on\ the\ {@code\ s}\ side\ of\ the\ micut;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment4.params=v
comment4.target=void\ validate(int)
comment5.params=G\ s\ t
comment5.target=boolean\ hasAugmentingPath(FlowNetwork,\ int,\ int)
comment6.params=G\ v
comment6.target=double\ excess(FlowNetwork,\ int)
comment7.params=G\ s\ t
comment7.target=boolean\ isFeasible(FlowNetwork,\ int,\ int)
comment8.params=G\ s\ t
comment8.target=boolean\ check(FlowNetwork,\ int,\ int)
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\r\n\ Unit\ tests\ the\ {@code\ FordFulkerson}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=10
