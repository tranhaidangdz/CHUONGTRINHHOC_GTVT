#BlueJ class context
comment0.target=FlowEdge
comment0.text=\r\n\ \ The\ {@code\ FlowEdge}\ class\ represents\ a\ capacitated\ edge\ with\ a\ \r\n\ flow\ in\ a\ {@link\ FlowNetwork}.\ Each\ edge\ consists\ of\ two\ integers\r\n\ \ (naming\ the\ two\ vertices),\ a\ real-valued\ capacity,\ and\ a\ real-valued\r\n\ \ flow.\ The\ data\ type\ provides\ methods\ for\ accessing\ the\ two\ endpoints\r\n\ \ of\ the\ directed\ edge\ and\ the\ weight.\ It\ also\ provides\ methods\ for\r\n\ \ changing\ the\ amount\ of\ flow\ on\ the\ edge\ and\ determining\ the\ residual\r\n\ \ capacity\ of\ the\ edge.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/64maxflow">Section\ 6.4</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=v\ w\ capacity
comment1.target=FlowEdge(int,\ int,\ double)
comment1.text=\r\n\ Initializes\ an\ edge\ from\ vertex\ {@code\ v}\ to\ vertex\ {@code\ w}\ with\r\n\ the\ given\ {@code\ capacity}\ and\ zero\ flow.\r\n\ @param\ v\ the\ tail\ vertex\r\n\ @param\ w\ the\ head\ vertex\r\n\ @param\ capacity\ the\ capacity\ of\ the\ edge\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ v}\ or\ {@code\ w}\r\n\ \ \ \ is\ a\ negative\ integer\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ capacity\ <\ 0.0}\r\n
comment10.params=vertex\ delta
comment10.target=void\ addResidualFlowTo(int,\ double)
comment10.text=\r\n\ Increases\ the\ flow\ on\ the\ edge\ in\ the\ direction\ to\ the\ given\ vertex.\r\n\ \ \ If\ {@code\ vertex}\ is\ the\ tail\ vertex,\ this\ increases\ the\ flow\ on\ the\ edge\ by\ {@code\ delta};\r\n\ \ \ if\ {@code\ vertex}\ is\ the\ head\ vertex,\ this\ decreases\ the\ flow\ on\ the\ edge\ by\ {@code\ delta}.\r\n\ @param\ vertex\ one\ endpoint\ of\ the\ edge\r\n\ @param\ delta\ amount\ by\ which\ to\ increase\ flow\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ vertex}\ is\ not\ one\ of\ the\ endpoints\r\n\ \ \ of\ the\ edge\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ delta}\ makes\ the\ flow\ on\r\n\ \ \ on\ the\ edge\ either\ negative\ or\ larger\ than\ its\ capacity\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ delta}\ is\ {@code\ NaN}\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ edge.\r\n\ @return\ a\ string\ representation\ of\ the\ edge\r\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\n\ Unit\ tests\ the\ {@code\ FlowEdge}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=v\ w\ capacity\ flow
comment2.target=FlowEdge(int,\ int,\ double,\ double)
comment2.text=\r\n\ Initializes\ an\ edge\ from\ vertex\ {@code\ v}\ to\ vertex\ {@code\ w}\ with\r\n\ the\ given\ {@code\ capacity}\ and\ {@code\ flow}.\r\n\ @param\ v\ the\ tail\ vertex\r\n\ @param\ w\ the\ head\ vertex\r\n\ @param\ capacity\ the\ capacity\ of\ the\ edge\r\n\ @param\ flow\ the\ flow\ on\ the\ edge\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ v}\ or\ {@code\ w}\r\n\ \ \ \ is\ a\ negative\ integer\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ capacity}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ flow}\ is\ between\ \r\n\ \ \ \ {@code\ 0.0}\ and\ {@code\ capacity}.\r\n
comment3.params=e
comment3.target=FlowEdge(FlowEdge)
comment3.text=\r\n\ Initializes\ a\ flow\ edge\ from\ another\ flow\ edge.\r\n\ @param\ e\ the\ edge\ to\ copy\r\n
comment4.params=
comment4.target=int\ from()
comment4.text=\r\n\ Returns\ the\ tail\ vertex\ of\ the\ edge.\r\n\ @return\ the\ tail\ vertex\ of\ the\ edge\r\n
comment5.params=
comment5.target=int\ to()
comment5.text=\r\n\ Returns\ the\ head\ vertex\ of\ the\ edge.\r\n\ @return\ the\ head\ vertex\ of\ the\ edge\r\n
comment6.params=
comment6.target=double\ capacity()
comment6.text=\r\n\ Returns\ the\ capacity\ of\ the\ edge.\r\n\ @return\ the\ capacity\ of\ the\ edge\r\n
comment7.params=
comment7.target=double\ flow()
comment7.text=\r\n\ Returns\ the\ flow\ on\ the\ edge.\r\n\ @return\ the\ flow\ on\ the\ edge\r\n
comment8.params=vertex
comment8.target=int\ other(int)
comment8.text=\r\n\ Returns\ the\ endpoint\ of\ the\ edge\ that\ is\ different\ from\ the\ given\ vertex\r\n\ (unless\ the\ edge\ represents\ a\ self-loop\ in\ which\ case\ it\ returns\ the\ same\ vertex).\r\n\ @param\ vertex\ one\ endpoint\ of\ the\ edge\r\n\ @return\ the\ endpoint\ of\ the\ edge\ that\ is\ different\ from\ the\ given\ vertex\r\n\ \ \ (unless\ the\ edge\ represents\ a\ self-loop\ in\ which\ case\ it\ returns\ the\ same\ vertex)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ vertex}\ is\ not\ one\ of\ the\ endpoints\r\n\ \ \ of\ the\ edge\r\n
comment9.params=vertex
comment9.target=double\ residualCapacityTo(int)
comment9.text=\r\n\ Returns\ the\ residual\ capacity\ of\ the\ edge\ in\ the\ direction\r\n\ \ to\ the\ given\ {@code\ vertex}.\r\n\ @param\ vertex\ one\ endpoint\ of\ the\ edge\r\n\ @return\ the\ residual\ capacity\ of\ the\ edge\ in\ the\ direction\ to\ the\ given\ vertex\r\n\ \ \ If\ {@code\ vertex}\ is\ the\ tail\ vertex,\ the\ residual\ capacity\ equals\r\n\ \ \ {@code\ capacity()\ -\ flow()};\ if\ {@code\ vertex}\ is\ the\ head\ vertex,\ the\r\n\ \ \ residual\ capacity\ equals\ {@code\ flow()}.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ vertex}\ is\ not\ one\ of\ the\ endpoints\ of\ the\ edge\r\n
numComments=13
