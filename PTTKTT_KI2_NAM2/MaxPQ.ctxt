#BlueJ class context
comment0.target=MaxPQ
comment0.text=\r\n\ \ The\ {@code\ MaxPQ}\ class\ represents\ a\ priority\ queue\ of\ generic\ keys.\r\n\ \ It\ supports\ the\ usual\ <em>insert</em>\ and\ <em>delete-the-maximum</em>\r\n\ \ operations,\ along\ with\ methods\ for\ peeking\ at\ the\ maximum\ key,\r\n\ \ testing\ if\ the\ priority\ queue\ is\ empty,\ and\ iterating\ through\r\n\ \ the\ keys.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ binary\ heap.\r\n\ \ The\ <em>insert</em>\ and\ <em>delete-the-maximum</em>\ operations\ take\r\n\ \ logarithmic\ amortized\ time.\r\n\ \ The\ <em>max</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ operations\ take\ constant\ time.\r\n\ \ Construction\ takes\ time\ proportional\ to\ the\ specified\ capacity\ or\ the\ number\ of\r\n\ \ items\ used\ to\ initialize\ the\ data\ structure.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/24pq">Section\ 2.4</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n\r\n\ \ @param\ <Key>\ the\ generic\ type\ of\ key\ on\ this\ priority\ queue\r\n
comment1.params=initCapacity
comment1.target=MaxPQ(int)
comment1.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ with\ the\ given\ initial\ capacity.\r\n\r\n\ @param\ \ initCapacity\ the\ initial\ capacity\ of\ this\ priority\ queue\r\n
comment10.params=x
comment10.target=void\ insert(java.lang.Object)
comment10.text=\r\n\ Adds\ a\ new\ key\ to\ this\ priority\ queue.\r\n\r\n\ @param\ \ x\ the\ new\ key\ to\ add\ to\ this\ priority\ queue\r\n
comment11.params=
comment11.target=java.lang.Object\ delMax()
comment11.text=\r\n\ Removes\ and\ returns\ a\ largest\ key\ on\ this\ priority\ queue.\r\n\r\n\ @return\ a\ largest\ key\ on\ this\ priority\ queue\r\n\ @throws\ NoSuchElementException\ if\ this\ priority\ queue\ is\ empty\r\n
comment12.params=k
comment12.target=void\ swim(int)
comment12.text=\r\n\ Helper\ functions\ to\ restore\ the\ heap\ invariant.\r\n
comment13.params=k
comment13.target=void\ sink(int)
comment14.params=i\ j
comment14.target=boolean\ less(int,\ int)
comment14.text=\r\n\ Helper\ functions\ for\ compares\ and\ swaps.\r\n
comment15.params=i\ j
comment15.target=void\ exch(int,\ int)
comment16.params=
comment16.target=boolean\ isMaxHeap()
comment17.params=k
comment17.target=boolean\ isMaxHeap(int)
comment18.params=
comment18.target=java.util.Iterator\ iterator()
comment18.text=\r\n\ Returns\ an\ iterator\ that\ iterates\ over\ the\ keys\ on\ this\ priority\ queue\r\n\ in\ descending\ order.\r\n\ The\ iterator\ doesn't\ implement\ {@code\ remove()}\ since\ it's\ optional.\r\n\r\n\ @return\ an\ iterator\ that\ iterates\ over\ the\ keys\ in\ descending\ order\r\n
comment19.params=args
comment19.target=void\ main(java.lang.String[])
comment19.text=\r\n\ Unit\ tests\ the\ {@code\ MaxPQ}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=
comment2.target=MaxPQ()
comment2.text=\r\n\ Initializes\ an\ empty\ priority\ queue.\r\n
comment3.params=initCapacity\ comparator
comment3.target=MaxPQ(int,\ java.util.Comparator)
comment3.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ with\ the\ given\ initial\ capacity,\r\n\ using\ the\ given\ comparator.\r\n\r\n\ @param\ \ initCapacity\ the\ initial\ capacity\ of\ this\ priority\ queue\r\n\ @param\ \ comparator\ the\ order\ in\ which\ to\ compare\ the\ keys\r\n
comment4.params=comparator
comment4.target=MaxPQ(java.util.Comparator)
comment4.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ using\ the\ given\ comparator.\r\n\r\n\ @param\ \ comparator\ the\ order\ in\ which\ to\ compare\ the\ keys\r\n
comment5.params=keys
comment5.target=MaxPQ(java.lang.Object[])
comment5.text=\r\n\ Initializes\ a\ priority\ queue\ from\ the\ array\ of\ keys.\r\n\ Takes\ time\ proportional\ to\ the\ number\ of\ keys,\ using\ sink-based\ heap\ construction.\r\n\r\n\ @param\ \ keys\ the\ array\ of\ keys\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ Returns\ true\ if\ this\ priority\ queue\ is\ empty.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ priority\ queue\ is\ empty;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment7.params=
comment7.target=int\ size()
comment7.text=\r\n\ Returns\ the\ number\ of\ keys\ on\ this\ priority\ queue.\r\n\r\n\ @return\ the\ number\ of\ keys\ on\ this\ priority\ queue\r\n
comment8.params=
comment8.target=java.lang.Object\ max()
comment8.text=\r\n\ Returns\ a\ largest\ key\ on\ this\ priority\ queue.\r\n\r\n\ @return\ a\ largest\ key\ on\ this\ priority\ queue\r\n\ @throws\ NoSuchElementException\ if\ this\ priority\ queue\ is\ empty\r\n
comment9.params=capacity
comment9.target=void\ resize(int)
numComments=20
